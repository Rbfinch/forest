{
  "immutable_variables": [
    {
      "basic_type": "method call result",
      "context": "let additional_patterns = read_base_strings_from_json(regex_patterns_file)",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 71,
      "name": "additional_patterns",
      "scope": "main",
      "type": "unwrapped value"
    },
    {
      "basic_type": "function call result",
      "context": "let args = Args::parse();",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 66,
      "name": "args",
      "scope": "main",
      "type": "function result"
    },
    {
      "basic_type": "Vec<String>",
      "context": "let base_strings: Vec<String> = json[\"regexSet\"][\"regex\"]",
      "file": "../spikeq/src/read_regex.rs",
      "kind": "explicitly typed pattern",
      "line": 85,
      "name": "base_strings",
      "scope": "read_base_strings_from_json",
      "type": "Vec < String >"
    },
    {
      "basic_type": "Vec<T>",
      "context": "let chars = ['A', 'C', 'T', 'G'];",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 31,
      "name": "chars",
      "scope": "generate_sequence",
      "type": "array"
    },
    {
      "basic_type": "Vec<char>",
      "context": "let chars = ['A', 'C', 'T', 'G'];",
      "file": "../spikeq/src/main.rs",
      "kind": "explicitly typed pattern",
      "line": 31,
      "name": "chars",
      "scope": "generate_quality_line",
      "type": "Vec < char >"
    },
    {
      "basic_type": "method call result",
      "context": "let file = std::fs::File::open(regex_patterns_file).expect(\"Unable to open file\");",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 137,
      "name": "file",
      "scope": "main",
      "type": "unwrapped value"
    },
    {
      "basic_type": "unknown",
      "context": "let file = File::open(filename)?;",
      "file": "../spikeq/src/read_regex.rs",
      "kind": "inferred from initialization",
      "line": 55,
      "name": "file",
      "scope": "read_base_strings_from_json",
      "type": "expression result"
    },
    {
      "basic_type": "function call result",
      "context": "let iupac_regexes = get_iupac_regexes();",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 73,
      "name": "iupac_regexes",
      "scope": "main",
      "type": "function result"
    },
    {
      "basic_type": "unknown",
      "context": "mod arg;",
      "file": "../spikeq/src/main.rs",
      "kind": "pattern match",
      "line": 1,
      "name": "j",
      "scope": "main",
      "type": "inferred from context"
    },
    {
      "basic_type": "Value",
      "context": "mod arg;",
      "file": "../spikeq/src/main.rs",
      "kind": "explicitly typed pattern",
      "line": 1,
      "name": "json",
      "scope": "main",
      "type": "serde_json :: Value"
    },
    {
      "basic_type": "Value",
      "context": "use serde_json::Value;",
      "file": "../spikeq/src/read_regex.rs",
      "kind": "explicitly typed pattern",
      "line": 1,
      "name": "json",
      "scope": "read_base_strings_from_json",
      "type": "Value"
    },
    {
      "basic_type": "method call result",
      "context": "let length = rng.gen_range(min_length..=max_length);",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 33,
      "name": "length",
      "scope": "generate_sequence",
      "type": "method result"
    },
    {
      "basic_type": "String",
      "context": "mod arg;",
      "file": "../spikeq/src/main.rs",
      "kind": "explicitly typed pattern",
      "line": 1,
      "name": "line",
      "scope": "generate_quality_line",
      "type": "String"
    },
    {
      "basic_type": "unknown",
      "context": "let max_length = parts[1]",
      "file": "../spikeq/src/arg.rs",
      "kind": "inferred from initialization",
      "line": 97,
      "name": "max_length",
      "scope": "parse_length_range",
      "type": "expression result"
    },
    {
      "basic_type": "unknown",
      "context": "let (min_length, max_length) = args.length;",
      "file": "../spikeq/src/main.rs",
      "kind": "pattern match",
      "line": 90,
      "name": "max_length",
      "scope": "main",
      "type": "inferred from context"
    },
    {
      "basic_type": "unknown",
      "context": "let min_length = parts[0]",
      "file": "../spikeq/src/arg.rs",
      "kind": "inferred from initialization",
      "line": 94,
      "name": "min_length",
      "scope": "parse_length_range",
      "type": "expression result"
    },
    {
      "basic_type": "unknown",
      "context": "let (min_length, max_length) = args.length;",
      "file": "../spikeq/src/main.rs",
      "kind": "pattern match",
      "line": 90,
      "name": "min_length",
      "scope": "main",
      "type": "inferred from context"
    },
    {
      "basic_type": "unknown",
      "context": "let output_json = serde_json::json!({",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 149,
      "name": "output_json",
      "scope": "main",
      "type": "expression result"
    },
    {
      "basic_type": "Vec<&str>",
      "context": "use clap::Parser;",
      "file": "../spikeq/src/arg.rs",
      "kind": "explicitly typed pattern",
      "line": 1,
      "name": "parts",
      "scope": "parse_length_range",
      "type": "Vec < & str >"
    },
    {
      "basic_type": "unknown",
      "context": "mod arg;",
      "file": "../spikeq/src/main.rs",
      "kind": "pattern match",
      "line": 1,
      "name": "pattern",
      "scope": "main",
      "type": "inferred from context"
    },
    {
      "basic_type": "method call result",
      "context": "let pos = rng.gen_range(0..=sequence.len());",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 60,
      "name": "pos",
      "scope": "insert_patterns",
      "type": "method result"
    },
    {
      "basic_type": "function call result",
      "context": "let quality_line = generate_quality_line(sequence.len(), &regex_patterns);",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 115,
      "name": "quality_line",
      "scope": "main",
      "type": "function result"
    },
    {
      "basic_type": "function call result",
      "context": "let quality_line = generate_quality_line(sequence.len(), &regex_patterns);",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 115,
      "name": "quality_line",
      "scope": "main",
      "type": "function result"
    },
    {
      "basic_type": "unknown",
      "context": "mod arg;",
      "file": "../spikeq/src/main.rs",
      "kind": "pattern match",
      "line": 1,
      "name": "re",
      "scope": "main",
      "type": "inferred from context"
    },
    {
      "basic_type": "function call result",
      "context": "let reader = std::io::BufReader::new(file);",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 138,
      "name": "reader",
      "scope": "main",
      "type": "function result"
    },
    {
      "basic_type": "function call result",
      "context": "let reader = BufReader::new(file);",
      "file": "../spikeq/src/read_regex.rs",
      "kind": "inferred from initialization",
      "line": 56,
      "name": "reader",
      "scope": "read_base_strings_from_json",
      "type": "function result"
    },
    {
      "basic_type": "conditional result",
      "context": "let regex_set_name = if let Some(regex_patterns_file) = &args.regex_patterns {",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 136,
      "name": "regex_set_name",
      "scope": "main",
      "type": "conditional result"
    },
    {
      "basic_type": "unknown",
      "context": "mod arg;",
      "file": "../spikeq/src/main.rs",
      "kind": "pattern match",
      "line": 1,
      "name": "replacements",
      "scope": "main",
      "type": "inferred from context"
    },
    {
      "basic_type": "Value",
      "context": "let schema: Value = serde_json::from_str(SCHEMA).map_err(|e| {",
      "file": "../spikeq/src/read_regex.rs",
      "kind": "explicitly typed pattern",
      "line": 59,
      "name": "schema",
      "scope": "read_base_strings_from_json",
      "type": "Value"
    },
    {
      "basic_type": "Vec<Regex>",
      "context": "let selected_patterns: Vec<Regex> = regex_patterns",
      "file": "../spikeq/src/main.rs",
      "kind": "explicitly typed pattern",
      "line": 98,
      "name": "selected_patterns",
      "scope": "main",
      "type": "Vec < Regex >"
    },
    {
      "basic_type": "String",
      "context": "let sequence: String = (0..length)",
      "file": "../spikeq/src/main.rs",
      "kind": "explicitly typed pattern",
      "line": 35,
      "name": "sequence",
      "scope": "generate_sequence",
      "type": "String"
    },
    {
      "basic_type": "function call result",
      "context": "let sequence: String = (0..length)",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 35,
      "name": "sequence",
      "scope": "main",
      "type": "function result"
    },
    {
      "basic_type": "Vec<_>",
      "context": "let summary: Vec<_> = selected_patterns",
      "file": "../spikeq/src/main.rs",
      "kind": "explicitly typed pattern",
      "line": 125,
      "name": "summary",
      "scope": "main",
      "type": "Vec < _ >"
    },
    {
      "basic_type": "method call result",
      "context": "let summary: Vec<_> = selected_patterns",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 125,
      "name": "summary_json",
      "scope": "main",
      "type": "unwrapped value"
    },
    {
      "basic_type": "method call result",
      "context": "let uuid = Uuid::new_v4().to_string();",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 87,
      "name": "uuid",
      "scope": "main",
      "type": "string"
    },
    {
      "basic_type": "unknown",
      "context": "let validator = jsonschema::validator_for(&schema).map_err(|e| {",
      "file": "../spikeq/src/read_regex.rs",
      "kind": "inferred from initialization",
      "line": 66,
      "name": "validator",
      "scope": "read_base_strings_from_json",
      "type": "expression result"
    }
  ],
  "mutable_variables": [
    {
      "basic_type": "function call result",
      "context": "let mut error_messages = Vec::new();",
      "file": "../spikeq/src/read_regex.rs",
      "kind": "inferred from initialization",
      "line": 73,
      "name": "error_messages",
      "scope": "read_base_strings_from_json",
      "type": "function result"
    },
    {
      "basic_type": "unknown",
      "context": "let mut expanded_patterns = vec![pattern];",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 75,
      "name": "expanded_patterns",
      "scope": "main",
      "type": "expression result"
    },
    {
      "basic_type": "function call result",
      "context": "let mut output = String::new();",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 88,
      "name": "output",
      "scope": "main",
      "type": "function result"
    },
    {
      "basic_type": "unknown",
      "context": "let mut pattern_counts = vec![0; *num_patterns];",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 103,
      "name": "pattern_counts",
      "scope": "main",
      "type": "expression result"
    },
    {
      "basic_type": "Vec<Regex>",
      "context": "let mut regex_patterns: Vec<Regex> = vec![];",
      "file": "../spikeq/src/main.rs",
      "kind": "explicitly typed pattern",
      "line": 68,
      "name": "regex_patterns",
      "scope": "main",
      "type": "Vec < Regex >"
    },
    {
      "basic_type": "unknown",
      "context": "let mut regex_patterns: Vec<Regex> = vec![];",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 68,
      "name": "result",
      "scope": "expand_strings",
      "type": "expression result"
    },
    {
      "basic_type": "function call result",
      "context": "let mut rng = rand::thread_rng();",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 32,
      "name": "rng",
      "scope": "generate_sequence",
      "type": "function result"
    },
    {
      "basic_type": "function call result",
      "context": "let mut rng = rand::thread_rng();",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 32,
      "name": "rng",
      "scope": "generate_quality_line",
      "type": "function result"
    },
    {
      "basic_type": "function call result",
      "context": "let mut rng = rand::thread_rng();",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 32,
      "name": "rng",
      "scope": "insert_patterns",
      "type": "function result"
    },
    {
      "basic_type": "function call result",
      "context": "let mut rng = rand::thread_rng();",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 32,
      "name": "rng",
      "scope": "main",
      "type": "function result"
    },
    {
      "basic_type": "function call result",
      "context": "let mut sequence = generate_sequence(min_length, max_length, &regex_patterns);",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 106,
      "name": "sequence",
      "scope": "main",
      "type": "function result"
    },
    {
      "basic_type": "unknown",
      "context": "let mut temp = vec![s];",
      "file": "../spikeq/src/main.rs",
      "kind": "inferred from initialization",
      "line": 187,
      "name": "temp",
      "scope": "expand_strings",
      "type": "expression result"
    }
  ],
  "metadata": {
    "datetime": "2025-03-23 16:16:26.876474 +11:00",
    "project_name": "spikeq",
    "version": "1.0.1"
  },
  "containers": [
    {
      "file": "../spikeq/src/arg.rs",
      "line": 1,
      "name": "Args",
      "type": "struct"
    },
    {
      "file": "../spikeq/src/arg.rs",
      "line": 1,
      "name": "Commands",
      "type": "enum"
    },
    {
      "file": "../spikeq/src/arg.rs",
      "line": 89,
      "name": "parse_length_range",
      "type": "function"
    },
    {
      "file": "../spikeq/src/main.rs",
      "line": 16,
      "name": "RegexPattern",
      "type": "struct"
    },
    {
      "file": "../spikeq/src/main.rs",
      "line": 18,
      "name": "RegexSet",
      "type": "struct"
    },
    {
      "file": "../spikeq/src/main.rs",
      "line": 30,
      "name": "generate_sequence",
      "type": "function"
    },
    {
      "file": "../spikeq/src/main.rs",
      "line": 30,
      "name": "generate_quality_line",
      "type": "function"
    },
    {
      "file": "../spikeq/src/main.rs",
      "line": 57,
      "name": "insert_patterns",
      "type": "function"
    },
    {
      "file": "../spikeq/src/main.rs",
      "line": 1,
      "name": "main",
      "type": "function"
    },
    {
      "file": "../spikeq/src/main.rs",
      "line": 183,
      "name": "expand_strings",
      "type": "function"
    },
    {
      "file": "../spikeq/src/iupac.rs",
      "line": 3,
      "name": "get_iupac_regexes",
      "type": "function"
    },
    {
      "file": "../spikeq/src/read_regex.rs",
      "line": 51,
      "name": "read_base_strings_from_json",
      "type": "function"
    }
  ]
}